#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import os 
from enum import Enum
from std_msgs.msg import UInt8
from turtlebot3_autorace_msgs.msg import MovingParam

class ExitParking():
    def __init__(self):
   
        # subscribes state
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)

        # publisher state
       
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam,latch=False, queue_size= 1)
        self.pub_mode_return = rospy.Publisher('/core/returned_mode', UInt8, queue_size=1)
    
        self.CurrentMode = Enum('CurrentMode', 'idle lane_following intersection exit_parking') 

        self.is_moving_complete = False
        self.is_intersection_detected = False
        self.is_left_detected = False
        self.is_right_detected = False

        self.exitParking(4)


    def cbMovingComplete(self, data):
        self.is_moving_complete = True
   
    def exitParking(self, idx):
        msg_pub_intersection_return = UInt8()
        rospy.sleep(3)
        rospy.loginfo("exiting parking")
     
        # self.TypeOfMoving = Enum('TypeOfMoving', 'idle left right forward backward')
        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear=0.25
        self.pub_moving.publish(msg_moving)
        while True:
            rospy.loginfo("moving")
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)


        rospy.loginfo("go left")
        msg_moving = MovingParam()
        msg_moving.moving_type=2
        msg_moving.moving_value_angular=90
        msg_moving.moving_value_linear=0
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)

        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear=0.35
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)


        rospy.loginfo("moving finished")
        self.current_mode = self.CurrentMode.lane_following.value
        msg_mode_return = UInt8()
        msg_mode_return.data = self.current_mode
                                            
        self.pub_mode_return.publish(msg_mode_return)
        rospy.sleep(3)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('exit_parking')
    node = ExitParking()
    node.main()
